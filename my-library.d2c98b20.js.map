{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aCAAC,EAAAD,EAAA,SCAAE,EAAAF,EAAA,S,aAKA,MAAMG,EAAUC,SAASC,cAAc,YAEjCC,EAAsBC,MAAMC,IAChC,IAGE,MAAMC,OAAEA,SAAiB,EAAAC,EAAAC,eAEzBT,EAAAU,QAAQC,YACRV,EAAQW,mBACN,aACA,EAAyBN,EAAMC,IAEjCP,EAAAU,QAAQG,Q,CACR,MAAOC,GACPC,QAAQD,MAAMA,EAAME,Q,GAIlB,EAAyB,CAAGV,EAAKC,IACtB,6DAEWD,EAAKW,6FAEbX,EAAKY,iGAEuCC,EAC5Cb,EAAKc,uFAEiDC,EAClDd,QACKD,EAAKgB,aAAaC,MAAM,EAAG,gDAOlDJ,EAAaC,IACjB,GAAIA,EAAMI,OAAS,GAAI,CAErB,OADoBJ,EAAMG,MAAM,EAAG,IAAM,K,CAGzC,OAAOH,CAAK,EAIVC,EAAad,IACjB,IAAIkB,EAAgB,GAEpB,IAAK,IAAIC,KAASnB,EAChBkB,EAAcE,KAAKD,EAAME,MAG3B,QAAQ,GACN,KAAKH,EAAcD,OAAS,EAC1B,MAAO,GAAGC,EAAc,OAAOA,EAAc,eAE/C,KAA8B,IAAzBA,EAAcD,OACjB,MAAO,GAAGC,EAAc,OAAOA,EAAc,KAE/C,KAA8B,IAAzBA,EAAcD,OACjB,MAAO,GAAGC,EAAc,K,GD5D9BpB,iBACE,MAAMwB,EAAcC,aAAaC,QAAQ,WACnCC,EAAeC,KAAKC,MAAML,GAKhC,IAAK,IAAIM,KAAWH,EAAaI,QAO/B,IACE,MAAM9B,KAAEA,SAAeP,EAAAsC,QAAMC,IAC3B,sCAAsCH,6DAIxC/B,EAAoBE,E,CAKpB,MAAOQ,GACPC,QAAQD,MAAMA,EAAME,Q,EAK1BuB,G,wDD1BA,EAAA1C,EAAA2C,gBACAC,OAAOC,iBAAiB,SAAUC,EAAAC","sources":["src/my-library.js","src/js/fromStorage/fetchWatchedFromStorage.js","src/js/fromStorage/renderWatchedMarkup.js"],"sourcesContent":["import { smoothscroll } from './js/smoothscroll';\nimport { hideScrollUpBtn } from './js/hide-scroll-up-button';\nimport { fetchMovieByIdFromStorageWatched } from './js/fromStorage/fetchWatchedFromStorage';\nimport { hiddenElementsOnMobileVersion } from './js/hideElementsInMobileVersion';\n\n// import { renderMarkup } from './js/showTrending/renderTrending';\n// import './js/pagination/pagination';\nimport './js/modalTeam/renderTeam';\nimport './js/modalTeam/teamModal';\nimport './js/modal';\nimport './js/vanilla';\n\nsmoothscroll();\nwindow.addEventListener('scroll', hideScrollUpBtn);\n","import axios from 'axios';\nimport { renderWatchedMarkup } from './renderWatchedMarkup';\n\nexport { fetchMovieByIdFromStorageWatched };\n\nconst API_KEY = 'ac91775ba29254b7e75060011bf34a90';\n\nasync function fetchMovieByIdFromStorageWatched() {\n  const savedMovies = localStorage.getItem('movieID');\n  const parsedMovies = JSON.parse(savedMovies);\n  //   console.log(parsedMovies);\n\n  //   gallery.innerHTML = '';\n\n  for (let movieId of parsedMovies.watched) {\n    // console.log(\n    //   'fetchMovieByIdFromStorageWatched ~ parsedMovies.watched',\n    //   parsedMovies.watched\n    // );\n    // console.log('Here is your movies ID:', movieId);\n\n    try {\n      const { data } = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n      );\n      // renderWatchedMarkup(data);\n      // console.log(data);\n      renderWatchedMarkup(data);\n      // запускаем функцию один раз, иначе уходит в infinity loop\n      //   fetchMovieByIdFromStorageWatched = function () {\n      //     return false;\n      //   };\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n}\n\nfetchMovieByIdFromStorageWatched();\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\nimport { fetchGenres } from '../fetchGenres';\n\nexport { renderWatchedMarkup };\n\nconst gallery = document.querySelector('.gallery');\n\nconst renderWatchedMarkup = async data => {\n  try {\n    // const data = await fetchMovieByIdFromStorageWatched();\n    // console.log(data);\n    const { genres } = await fetchGenres();\n    // console.log(genres);\n    Loading.hourglass();\n    gallery.insertAdjacentHTML(\n      'afterbegin',\n      watchedGalleryMarkupСreat(data, genres)\n    );\n    Loading.remove();\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n\nconst watchedGalleryMarkupСreat = (data, genres) => {\n  const markup = `\n      <li class=\"movieCard\">\n              <a data-id=\"${data.id}\">\n                  <img class=\"movieCard__image\" src=\"https://image.tmdb.org/t/p/w500${\n                    data.poster_path\n                  }\" alt=\"movieImg\" />\n                  <p class=\"movieCard__info movieCard__title\">${titleSlice(\n                    data.title\n                  )}</p>\n                      <p class=\"movieCard__info movieCard__description\">${cardGenres(\n                        genres\n                      )} | ${data.release_date.slice(0, 4)}</p>\n              </a>\n      </li>\n    `;\n  return markup;\n};\n\nconst titleSlice = title => {\n  if (title.length > 30) {\n    const titleSliced = title.slice(0, 30) + '...';\n    return titleSliced;\n  } else {\n    return title;\n  }\n};\n\nconst cardGenres = genres => {\n  let cardGenresArr = [];\n\n  for (let genre of genres) {\n    cardGenresArr.push(genre.name);\n  }\n\n  switch (true) {\n    case cardGenresArr.length > 2:\n      return `${cardGenresArr[0]}, ${cardGenresArr[1]}, other...`;\n\n    case cardGenresArr.length === 2:\n      return `${cardGenresArr[0]}, ${cardGenresArr[1]}`;\n\n    case cardGenresArr.length === 1:\n      return `${cardGenresArr[0]}`;\n\n    default:\n      break;\n  }\n};\n\n// renderWatchedMarkup();\n"],"names":["$9vy3o","parcelRequire","$2shzp","$dSs1Y","$782e3676ee977fac$var$gallery","document","querySelector","$782e3676ee977fac$export$1fbb1e823a6c5950","async","data","genres","$7zQK0","fetchGenres","Loading","hourglass","insertAdjacentHTML","remove","error","console","message","id","poster_path","$782e3676ee977fac$var$titleSlice","title","$782e3676ee977fac$var$cardGenres","release_date","slice","length","cardGenresArr","genre","push","name","savedMovies","localStorage","getItem","parsedMovies","JSON","parse","movieId","watched","default","get","$4eb615f5a9c539be$export$76db5913f35af0d5","smoothscroll","window","addEventListener","$i6cgS","hideScrollUpBtn"],"version":3,"file":"my-library.d2c98b20.js.map"}